Animal* a = new Dog();//Dog 객체를 힙에 생성하고, 그 주소를 부모 클래스 타입인 Animal* 포인터 a에 저장한다.

class Animal

class dog : public Animal

//다형성이용하는 이유:간편
class Animal {
public:
    virtual void speak() const {
        cout << "Some animal sound\n";
    }
};

class Dog : public Animal {
public:
    void speak() const override {
        cout << "Woof!\n";
    }
};

//bad
Horse* horse = new Horse();
Dog* dog = new Dog();
Elephant* elephant = new Elephant();

horse->run();
dog->run();
elephant->run();

//goog-with polymolphism
vector<Animal*> zoo;

zoo.push_back(new Horse());
zoo.push_back(new Dog());
zoo.push_back(new Elephant());

for (Animal* a : zoo) {
    a->run();  // 다형성 덕분에 종류 관계없이 실행!
}

/////////////////////////////////////////////
#include <iostream>
using namespace std;

class Animal {
public:
    virtual void speak() const {
        cout << "Animal speaks\n";
    }
};

class Dog : public Animal {
public:
    void speak() const override {
        cout << "Dog barks\n";
    }
};

class Cat : public Animal {
public:
    void speak() const override {
        cout << "Cat meows\n";
    }
};

int main() {
    Animal* a1 = new Dog();
    Animal* a2 = new Cat();

    a1->speak();  // 👉 실제로 Dog::speak() 실행
    a2->speak();  // 👉 실제로 Cat::speak() 실행

    delete a1;
    delete a2;
    return 0;
}

