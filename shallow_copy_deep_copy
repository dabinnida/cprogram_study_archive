MyArray::MyArray(const MyArray& other) {
    this->size = other.size;
    this->data = other.data;  // ← 이 한 줄이 “얕은 복사(shallow copy)”를 하는 부분
}
data는 int* 타입, 즉 메모리 주소를 담고 있으므로

this->data = other.data; 는 그 주소 값만 복사합니다.

결과적으로 this->data와 other.data가 동일한 배열을 가리키게 되죠.

->두 객체가 같은 메모리를 공유하니

한쪽에서 data[i]를 바꾸면, 다른 쪽에도 영향이 가고

소멸자에서 delete[] data;를 호출할 때

두 번 같은 메모리를 해제하려 하기 때문에 이중 해제(double free) 오류가 발생합니다.
-----------------------------------------------------------------------------------------
깊은 복사(deep copy)로 바꾸려면
복사 생성자를 아래처럼 수정해야 합니다:


MyArray::MyArray(const MyArray& other) {
    size = other.size;
    data = new int[size];            // 1) 새로운 배열 할당
    for (int i = 0; i < size; ++i)   // 2) 요소 하나하나 복사
        data[i] = other.data[i];
}
새로운 메모리를 new로 할당하고,

원본의 값을 하나씩 복사해 주면

this->data와 other.data가 서로 독립된 별도 메모리를 가리키게 됩니다.

이렇게 하면 얕은 복사가 가진 공유·이중 해제 문제를 모두 피할 수 있어요.

